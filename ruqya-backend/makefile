.PHONY: help install dev prod test migrate seed clean check-db docker-*

# Variables
PYTHON := python
PIP := pip
UVICORN := uvicorn
ALEMBIC := alembic
DOCKER_COMPOSE := docker-compose

# Colors
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
RED := \033[0;31m
MAGENTA := \033[0;35m
NC := \033[0m

.DEFAULT_GOAL := help

help: ## Show this help message
	@echo "$(BLUE)‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó$(NC)"
	@echo "$(BLUE)‚ïë           Ruqya Backend - Available Commands             ‚ïë$(NC)"
	@echo "$(BLUE)‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù$(NC)"
	@echo ""
	@echo "$(MAGENTA)‚ö° Quick Start:$(NC)"
	@echo "  $(GREEN)make setup$(NC)               - Complete Docker setup (recommended)"
	@echo "  $(GREEN)make dev$(NC)                 - Start development (Docker)"
	@echo ""
	@echo "$(MAGENTA)üê≥ Docker Commands:$(NC)"
	@echo "  $(YELLOW)make docker-up$(NC)           - Start all services"
	@echo "  $(YELLOW)make docker-down$(NC)         - Stop all services"
	@echo "  $(YELLOW)make docker-logs$(NC)         - View logs"
	@echo "  $(YELLOW)make docker-shell$(NC)        - Open backend shell"
	@echo "  $(YELLOW)make docker-migrate$(NC)      - Run migrations"
	@echo "  $(YELLOW)make docker-seed$(NC)         - Seed database"
	@echo "  $(YELLOW)make docker-reset$(NC)        - Complete reset"
	@echo ""
	@echo "$(MAGENTA)üíª Local Commands (without Docker):$(NC)"
	@echo "  $(YELLOW)make local-setup$(NC)         - Setup locally"
	@echo "  $(YELLOW)make local-dev$(NC)           - Run locally"
	@echo ""
	@echo "$(MAGENTA)üîß Other Commands:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -v -E "^(docker-|local-|setup|dev|help)" | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-25s$(NC) %s\n", $$1, $$2}'
	@echo ""

# ============================================================================
# MAIN COMMANDS (Docker-based)
# ============================================================================

setup: docker-up-build docker-wait docker-migrate docker-seed ## Complete setup with Docker (DEFAULT)
	@echo ""
	@echo "$(GREEN)‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó$(NC)"
	@echo "$(GREEN)‚ïë              ‚úÖ SETUP COMPLETE!                            ‚ïë$(NC)"
	@echo "$(GREEN)‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù$(NC)"
	@echo ""
	@echo "$(YELLOW)üîó Backend API:$(NC) http://localhost:8000"
	@echo "$(YELLOW)üìö API Docs:$(NC) http://localhost:8000/docs"
	@echo "$(YELLOW)üìñ ReDoc:$(NC) http://localhost:8000/redoc"
	@echo ""
	@echo "$(YELLOW)üîë Admin Credentials:$(NC)"
	@echo "  ‚Ä¢ Email: admin@ruqyahealinghub.com"
	@echo "  ‚Ä¢ Password: admin123"
	@echo ""
	@echo "$(MAGENTA)üí° Useful Commands:$(NC)"
	@echo "  ‚Ä¢ make logs          - View application logs"
	@echo "  ‚Ä¢ make shell         - Open backend shell"
	@echo "  ‚Ä¢ make docker-down   - Stop all services"
	@echo "  ‚Ä¢ make docker-reset  - Reset everything"
	@echo ""

dev: docker-up ## Start development environment (Docker)
	@echo "$(GREEN)‚úÖ Development environment started!$(NC)"
	@echo "$(YELLOW)Backend: http://localhost:8000$(NC)"
	@echo "$(YELLOW)API Docs: http://localhost:8000/docs$(NC)"
	@echo ""
	@make logs

logs: docker-logs ## View application logs

shell: docker-shell ## Open shell in backend container

stop: docker-down ## Stop all services

restart: docker-restart ## Restart all services

reset: docker-reset ## Complete reset (clean and rebuild)

# ============================================================================
# DOCKER COMMANDS
# ============================================================================

docker-build: ## Build Docker images
	@echo "$(BLUE)üî® Building Docker images...$(NC)"
	@$(DOCKER_COMPOSE) build
	@echo "$(GREEN)‚úÖ Images built!$(NC)"

docker-up: ## Start Docker services
	@echo "$(BLUE)üê≥ Starting Docker services...$(NC)"
	@$(DOCKER_COMPOSE) up -d
	@echo "$(GREEN)‚úÖ Services started!$(NC)"

docker-up-build: ## Build and start Docker services
	@echo "$(BLUE)üî® Building and starting Docker services...$(NC)"
	@$(DOCKER_COMPOSE) up -d --build
	@echo "$(GREEN)‚úÖ Services started!$(NC)"

docker-wait: ## Wait for services to be ready
	@echo "$(BLUE)‚è≥ Waiting for services to be ready...$(NC)"
	@sleep 5
	@for i in 1 2 3 4 5 6 7 8 9 10; do \
		if docker exec ruqya_backend python -c "from app.database import engine; engine.connect()" 2>/dev/null; then \
			echo "$(GREEN)‚úÖ Backend is ready!$(NC)"; \
			sleep 2; \
			break; \
		else \
			echo "  Attempt $$i/10: Services not ready, waiting..."; \
			sleep 3; \
		fi; \
		if [ $$i -eq 10 ]; then \
			echo "$(RED)‚ùå Services failed to start$(NC)"; \
			exit 1; \
		fi; \
	done

docker-down: ## Stop Docker services
	@echo "$(YELLOW)‚èπÔ∏è  Stopping Docker services...$(NC)"
	@$(DOCKER_COMPOSE) down
	@echo "$(GREEN)‚úÖ Services stopped!$(NC)"

docker-restart: ## Restart Docker services
	@echo "$(BLUE)üîÑ Restarting Docker services...$(NC)"
	@$(DOCKER_COMPOSE) restart
	@echo "$(GREEN)‚úÖ Services restarted!$(NC)"

docker-logs: ## View Docker logs (all services)
	@$(DOCKER_COMPOSE) logs -f

docker-logs-backend: ## View backend logs only
	@$(DOCKER_COMPOSE) logs -f backend

docker-logs-db: ## View database logs only
	@$(DOCKER_COMPOSE) logs -f db

docker-ps: ## Show running containers
	@$(DOCKER_COMPOSE) ps

docker-shell: ## Open shell in backend container
	@echo "$(BLUE)üêö Opening shell in backend container...$(NC)"
	@docker exec -it ruqya_backend /bin/bash

docker-db-shell: ## Open PostgreSQL shell
	@echo "$(BLUE)üêö Opening database shell...$(NC)"
	@docker exec -it ruqya_db psql -U postgres ruqya_db

docker-migrate: ## Run migrations in Docker
	@echo "$(BLUE)‚¨ÜÔ∏è  Running migrations...$(NC)"
	@docker exec ruqya_backend alembic upgrade head
	@echo "$(GREEN)‚úÖ Migrations applied!$(NC)"

docker-migrate-create: ## Create migration in Docker (use MSG="message")
	@if [ -z "$(MSG)" ]; then \
		echo "$(RED)‚ùå Error: MSG is required$(NC)"; \
		echo "$(YELLOW)Usage: make docker-migrate-create MSG=\"your message\"$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)üìù Creating migration...$(NC)"
	@docker exec ruqya_backend alembic revision --autogenerate -m "$(MSG)"
	@echo "$(GREEN)‚úÖ Migration created!$(NC)"

docker-seed: ## Seed database in Docker
	@echo "$(BLUE)üå± Seeding database...$(NC)"
	@docker exec ruqya_backend python scripts/seed_data.py
	@echo "$(GREEN)‚úÖ Database seeded!$(NC)"

docker-clean: ## Remove all containers, volumes, and images
	@echo "$(RED)üßπ Cleaning Docker resources...$(NC)"
	@$(DOCKER_COMPOSE) down -v --remove-orphans
	@docker system prune -f
	@echo "$(GREEN)‚úÖ Cleaned!$(NC)"

docker-reset: docker-clean docker-up-build docker-wait docker-migrate docker-seed ## Complete Docker reset
	@echo "$(GREEN)‚úÖ Docker environment reset complete!$(NC)"

# ============================================================================
# LOCAL COMMANDS (Without Docker)
# ============================================================================

local-install: ## Install dependencies locally
	@echo "$(BLUE)üì¶ Installing dependencies...$(NC)"
	@$(PIP) install -r requirements.txt
	@echo "$(GREEN)‚úÖ Dependencies installed!$(NC)"

local-setup: local-install create-env local-db-start wait-for-local-db local-migrate-up local-seed ## Complete local setup (without Docker)
	@echo "$(GREEN)‚úÖ Local setup complete!$(NC)"
	@echo "$(YELLOW)Run 'make local-dev' to start the server$(NC)"

create-env: ## Create .env file
	@if [ ! -f .env ]; then \
		echo "$(BLUE)üìù Creating .env file...$(NC)"; \
		if [ -f .env.example ]; then \
			cp .env.example .env; \
		else \
			echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/ruqya_db" > .env; \
			echo "SECRET_KEY=dev-secret-key-change-in-production-min-32-chars" >> .env; \
			echo "FRONTEND_URL=http://localhost:3000" >> .env; \
			echo "ENVIRONMENT=development" >> .env; \
		fi; \
		echo "$(GREEN)‚úÖ .env file created$(NC)"; \
	else \
		echo "$(YELLOW).env file already exists$(NC)"; \
	fi

local-db-start: ## Start PostgreSQL locally
	@echo "$(BLUE)üóÑÔ∏è  Starting PostgreSQL...$(NC)"
	@if docker ps -a --format '{{.Names}}' | grep -q '^ruqya_postgres$$'; then \
		if docker ps --format '{{.Names}}' | grep -q '^ruqya_postgres$$'; then \
			echo "$(YELLOW)PostgreSQL already running$(NC)"; \
		else \
			docker start ruqya_postgres; \
			echo "$(GREEN)‚úÖ PostgreSQL started!$(NC)"; \
		fi; \
	else \
		docker run -d \
			--name ruqya_postgres \
			-e POSTGRES_USER=postgres \
			-e POSTGRES_PASSWORD=postgres \
			-e POSTGRES_DB=ruqya_db \
			-p 5432:5432 \
			-v ruqya_postgres_data:/var/lib/postgresql/data \
			postgres:15-alpine && echo "$(GREEN)‚úÖ PostgreSQL started!$(NC)"; \
	fi

wait-for-local-db: ## Wait for local database
	@echo "$(BLUE)‚è≥ Waiting for database...$(NC)"
	@for i in 1 2 3 4 5 6 7 8 9 10; do \
		if docker exec ruqya_postgres pg_isready -U postgres > /dev/null 2>&1; then \
			echo "$(GREEN)‚úÖ Database ready!$(NC)"; \
			sleep 2; \
			break; \
		else \
			echo "  Attempt $$i/10: Waiting..."; \
			sleep 2; \
		fi; \
	done

local-db-stop: ## Stop local PostgreSQL
	@echo "$(YELLOW)‚èπÔ∏è  Stopping PostgreSQL...$(NC)"
	@docker stop ruqya_postgres 2>/dev/null || true
	@echo "$(GREEN)‚úÖ PostgreSQL stopped!$(NC)"

local-migrate-up: ## Run migrations locally
	@echo "$(BLUE)‚¨ÜÔ∏è  Running migrations...$(NC)"
	@$(ALEMBIC) upgrade head
	@echo "$(GREEN)‚úÖ Migrations applied!$(NC)"

local-seed: ## Seed database locally
	@echo "$(BLUE)üå± Seeding database...$(NC)"
	@$(PYTHON) scripts/seed_data.py
	@echo "$(GREEN)‚úÖ Database seeded!$(NC)"

local-dev: ## Run development server locally
	@echo "$(BLUE)üöÄ Starting local development server...$(NC)"
	@echo "$(YELLOW)Server: http://localhost:8000$(NC)"
	@echo "$(YELLOW)API Docs: http://localhost:8000/docs$(NC)"
	@echo ""
	@$(UVICORN) app.main:app --reload --host 0.0.0.0 --port 8000

# ============================================================================
# UTILITIES
# ============================================================================

clean: ## Clean up generated files
	@echo "$(BLUE)üßπ Cleaning up...$(NC)"
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name "*.pyc" -delete 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Cleaned!$(NC)"

health: ## Check API health
	@echo "$(BLUE)üè• Checking API health...$(NC)"
	@curl -s http://localhost:8000/health | python -m json.tool 2>/dev/null || echo "$(RED)‚ùå Server is not running$(NC)"

routes: ## Show all API routes
	@docker exec ruqya_backend python scripts/show_routes.py 2>/dev/null || $(PYTHON) scripts/show_routes.py

backup: ## Backup database
	@echo "$(BLUE)üíæ Creating database backup...$(NC)"
	@mkdir -p backups
	@docker exec ruqya_db pg_dump -U postgres ruqya_db > backups/backup_$$(date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Backup created!$(NC)"

info: ## Show project information
	@echo "$(BLUE)‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó$(NC)"
	@echo "$(BLUE)‚ïë              Ruqya Backend - Information                  ‚ïë$(NC)"
	@echo "$(BLUE)‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö° Quick Start:$(NC)"
	@echo "  make setup    - Complete Docker setup"
	@echo "  make dev      - Start development"
	@echo "  make logs     - View logs"
	@echo ""
	@echo "$(YELLOW)üîó URLs:$(NC)"
	@echo "  ‚Ä¢ API: http://localhost:8000"
	@echo "  ‚Ä¢ Docs: http://localhost:8000/docs"
	@echo "  ‚Ä¢ ReDoc: http://localhost:8000/redoc"
	@echo ""
	@echo "$(YELLOW)üîë Admin Credentials:$(NC)"
	@echo "  ‚Ä¢ Email: admin@ruqyahealinghub.com"
	@echo "  ‚Ä¢ Password: admin123"
	@echo ""
	@echo "$(YELLOW)üèóÔ∏è  Technology:$(NC)"
	@echo "  ‚Ä¢ FastAPI + PostgreSQL + Docker"
	@echo "  ‚Ä¢ SQLAlchemy 2.0 + Alembic"
	@echo "  ‚Ä¢ WebSocket support"
	@echo ""

version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ruqya_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: ruqya_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5


  # FastAPI Backend
  backend:
    build:
      context: ./ruqya-backend
      dockerfile: Dockerfile
    container_name: ruqya_backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@ruqya_db:5432/ruqya_db
      - SECRET_KEY=your-super-secret-key-change-this-min-32-characters-long
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      - FRONTEND_URL=http://194.163.145.31:3000
      - AWS_ACCESS_KEY_ID=
      - AWS_SECRET_ACCESS_KEY=
      - AWS_S3_BUCKET=
      - AWS_REGION=us-east-1
      - RESEND_API_KEY=
      - EMAIL_FROM=noreply@ruqyahealinghub.com
      - ENVIRONMENT=production
    volumes:
      - ./ruqya-backend:/app
      - backend_uploads:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000

  # Next.js Frontend - PRODUCTION MODE
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: http://194.163.145.31:8000
        NEXT_PUBLIC_WS_URL: ws://194.163.145.31:8000/api/v1/chat/ws
        NEXT_PUBLIC_APP_URL: http://194.163.145.31:3000
    container_name: ruqya_frontend
    environment:
      - API_URL=http://ruqya_backend:8000
      - NEXT_PUBLIC_API_URL=http://194.163.145.31:8000
      - NEXT_PUBLIC_WS_URL=ws://194.163.145.31:8000/api/v1/chat/ws
      - NEXT_PUBLIC_APP_URL=http://194.163.145.31:3000
      - HOSTNAME=0.0.0.0
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    # REMOVED VOLUMES FOR PRODUCTION (no hot-reload needed)
    # REMOVED COMMAND (uses Dockerfile CMD: pnpm start)

volumes:
  postgres_data:
  backend_uploads:
